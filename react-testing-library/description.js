// Тестирование в реакт приложениях с использованием React Testing Library

// npx create-react-app .  - создаем приложение

// В папке users пример тестирования компонента с запросом
// "test": "react-scripts test --transformIgnorePatterns \"node_modules/(?!axios)/\"" - заменяем строку запуска тестов в package.json(без нее с axios в тестах возникает ошибка)

// npm i react-router-dom  для тестирования более сложной структуры приложения

// npm i @reduxjs/toolkit react-redux  - примеры тестирования в store и Counter(предыдущие тесты, если в них есть блоки, использующие глобальные состояния, оборачиваем в Provider)


// npm init wdio (запрашивает дополнительный пакет, соглашаемсян) - WebdriverIO для тестирования e2e(наподобие cypress, hermiona) - https://webdriver.io/docs/gettingstarted/
    // При установке спрашивает
        // где разместить - в д.с размещаем на локальной машине(в больших проектах эти тесты очень ресурсоемкие, рекоммендуется устанавливать удаленно)
        // фреймворк - mocha
        // использование компиллера - нет в д.с
        // расположение - (./test/specs/**/*.js) ./tests/e2e/**/*.js
        // автогенерировать некоторые тесты - yes
        // использовать page objects - yes
        // размещение page objects - (./test/specs/**/*.js) ./tests/pages/**/*.js
        // базовый url - localhost
            // в корне приложения появляется wido.conf.js c настройками, можно перенастроить(в д.с изменили localhost на 3000), также появилась папка tests c e2e и pages
        // npx wdio run ./wdio.conf.js     - запуск (путь к конфигу), в package меняем на test:e2e
            // запустил -  встроенный тест работает 
            // для примера тестирования создаем страницу HelloWorld.jsx, в папке tests/pages создаем hello.page.js, меняем адрес хоста в документе page.js на рабочий(3000 в д.с - !!! https меняем на http при использовании локального хоста) 
            // реально открывает страницу в браузере и выполняет действия